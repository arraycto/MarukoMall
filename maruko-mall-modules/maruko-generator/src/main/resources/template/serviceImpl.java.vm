package ${package}.service.impl;

import com.github.pagehelper.PageHelper;
import ${commonPackage}.enums.StatusEnum;
import ${commonPackage}.msg.BaseResponse;
import ${commonPackage}.msg.ListRestResponse;
import ${commonPackage}.msg.ObjectRestResponse;
import ${commonPackage}.msg.TableResultResponse;
import ${commonPackage}.page.Page;
import ${package}.client.dto.${className}DTO;
import ${package}.entity.${className}DO;
import ${package}.mapper.I${className}Mapper;
import ${package}.service.I${className}Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.util.List;

/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@Service
@Transactional(rollbackFor = Exception.class)
public class ${className}ServiceImpl implements I${className}Service {

	@Autowired
	private I${className}Mapper ${classname}Mapper;


	@Override
	public BaseResponse add(${className}DTO ${classname}DTO) {
            ${className}DO ${classname}DO = new ${className}DO();
		BeanUtils.copyProperties(${classname}DTO, ${classname}DO);
		int effectRow = ${classname}Mapper.insertSelective(${classname}DO);
		if (effectRow > 0) {
			return BaseResponse.success(StatusEnum.SUCCESS.getDescribe());
		}
		return BaseResponse.failure(StatusEnum.FAILURE.getDescribe());
	}

	@Override
	public ObjectRestResponse<${className}DTO> add${className}(${className}DTO ${classname}DTO){
		int effectRow = ${classname}Mapper.insertSelective${className}(${classname}DTO);
		ObjectRestResponse<${className}DTO> objectRestResponse = new ObjectRestResponse<>();
		if (effectRow > 0) {
			objectRestResponse.data(${classname}DTO);
        }
		return objectRestResponse;
    }

	@Override
	public BaseResponse update(${className}DTO ${classname}DTO) {
            ${className}DO ${classname}DO = new ${className}DO();
		BeanUtils.copyProperties(${classname}DTO, ${classname}DO);
		int effectRow = ${classname}Mapper.updateByPrimaryKeySelective(${classname}DO);
		if (effectRow > 0) {
			return BaseResponse.success(StatusEnum.SUCCESS.getDescribe());
		}
		return BaseResponse.failure(StatusEnum.FAILURE.getDescribe());
	}

	@Override
	public BaseResponse remove(Integer id) {
		Integer effectRow = ${classname}Mapper.deleteByPrimaryKey(id);
		if (effectRow > 0) {
			return BaseResponse.success(StatusEnum.SUCCESS.getDescribe());
		}
		return BaseResponse.failure(StatusEnum.FAILURE.getDescribe());
	}

	@Override
	public TableResultResponse<${className}DTO> page(${className}DTO ${classname}DTO, Page<${className}DTO> page) {
		PageHelper.startPage(page.getPageNo(), page.getPageSize());
		com.github.pagehelper.Page<${className}DTO> list = (com.github.pagehelper.Page<${className}DTO>) ${classname}Mapper.query(${classname}DTO);
		if (!CollectionUtils.isEmpty(list)) {
			return new TableResultResponse(list.getTotal(), list.getPages(), list.getResult());
        }
		return new TableResultResponse<DTO>();
	}

	@Override
	public ListRestResponse<${className}DTO> query(${className}DTO ${classname}DTO) {
		List<${className}DTO> list = this.${classname}Mapper.query(${classname}DTO);
		ListRestResponse<${className}DTO> listRestResponse = new ListRestResponse<>();
		listRestResponse.count(list.size());
		listRestResponse.result(list);
		return listRestResponse;
	}

	@Override
	public ObjectRestResponse<${className}DTO> findById(Integer id) {
            ${className}DO ${classname}DO = ${classname}Mapper.selectByPrimaryKey(id);
		ObjectRestResponse<${className}DTO> objectRestResponse = new ObjectRestResponse<>();
            if (${classname}DO != null) {
                    ${className}DTO ${classname}DTO = new ${className}DTO();
				BeanUtils.copyProperties(${classname}DO, ${classname}DTO);
				objectRestResponse.data(${classname}DTO);
            }
		return objectRestResponse;
	}

	@Override
	public ObjectRestResponse<${className}DTO> findByCondition(${className}DTO ${classname}DTO) {
		List<${className}DTO> list = ${classname}Mapper.query(${classname}DTO);
        ObjectRestResponse<${className}DTO> objectRestResponse = new ObjectRestResponse<>();
		if (!CollectionUtils.isEmpty(list)) {
			objectRestResponse.data(list.get(0));
		}
		return objectRestResponse;
	}
}